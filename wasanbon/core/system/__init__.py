# encoding: UTF-8
import os, sys, time, signal, traceback, yaml, subprocess
import github
import rtctree
import omniORB

import wasanbon
from wasanbon import util
from wasanbon.core.system import run
from wasanbon.core import rtc
from wasanbon.core.rtc import rtcprofile
from wasanbon.core.system import rtsprofile
from wasanbon.core.rtc import rtcconf

process = {}
endflag = False

#import rtctree
from rtshell import rtcryo


def is_all_process_terminated():
    flags = []
    global process
    for key in process.keys():
        if process[key].returncode != None:
            flags.append(False)
        else:
            process[key].poll()
            if process[key].returncode == None:
                flags.append(False)
            else:
                flags.append(True)
    if len(flags) != 0:
        return all(flags)
    else:
        return False

def git_command(commands, verbose=False):
    gitenv = os.environ.copy()
    if not 'HOME' in gitenv.keys():
        gitenv['HOME'] = wasanbon.get_home_path()
        sys.stdout.write(' - HOME is %s' % gitenv['HOME'])

    stdout = None if verbose else subprocess.PIPE
    stderr = None if verbose else subprocess.PIPE
        
    cmd = [wasanbon.setting['local']['git']] + commands
    subprocess.call(cmd, env=gitenv, stdout=stdout, stderr=stderr)
    pass

def git_init(verbose=False):
    git_command(['init'], verbose=verbose)

    files = ['.gitignore', 'setting.yaml', 'conf/*.conf', 'rtc/repository.yaml', 'system/*.xml']
    command = ['add'] + files
    git_command(command, verbose)
    first_comment = 'This if first commit. This repository is generated by wasanbon'    
    git_command(['commit', '-a', '-m', first_comment], verbose)
    pass


def github_init(user, passwd, sysname, verbose=False):
    github_obj = github.Github(user, passwd)
    git_user = github_obj.get_user()
    try:
        git_user.login
    except:
        print ' - Login Error.'
        return
    github_obj.get_user().create_repo(sysname)
    sys.stdout.write("Connect to GITHUB repository of %s\n" % sysname)
    gitenv = os.environ.copy()
    if not 'HOME' in gitenv.keys():
        gitenv['HOME'] = wasanbon.get_home_path()
        print ' - HOME is %s' % gitenv['HOME']
        pass

    stdout = None if verbose else subprocess.PIPE
    cmd = [wasanbon.setting['local']['git'], 'remote', 'add', 'origin', 'git@github.com:' + user + '/' + sysname + '.git']
    subprocess.call(cmd, env=gitenv, stdout=stdout)
    cmd = [wasanbon.setting['local']['git'], 'push', '-u', 'origin', 'master']
    subprocess.call(cmd, env=gitenv, stdout=stdout)

    #url = 'git@github.com:' + user + '/' + repo_name + '.git'
    #update_repository_yaml(repo_name, url)
    pass


def get_nameserver():
    y = yaml.load(open('setting.yaml', 'r'))
    cppconf = rtcconf.RTCConf(y['application']['conf.C++'])
    pyconf = rtcconf.RTCConf(y['application']['conf.Python'])
    javaconf = rtcconf.RTCConf(y['application']['conf.Java'])
    ns = cppconf['corba.nameservers']
    if ns == pyconf['corba.nameservers'] and ns == javaconf['corba.nameservers']:
        return ns
    return None


def run_system(nobuild, nowait=False, verbose=False):
    sys.stdout.write('Ctrl+C to stop system.\n')
    signal.signal(signal.SIGINT, signal_action)
    
    ns_process = []
    no_ns = False
    ns = get_nameserver()

    if no_ns:
        if verbose:
            sys.stdout.write(' - Can not find Name Service (%s)\n' % ns)
        ns_process = launch_nameserver(ns)

    sys.stdout.write(' - Starting RTC-Daemons\n')
    
    start_process()

    global endflag
    
    if not nobuild:
        interval = 3
        for i in range(0, interval):
            sys.stdout.write('\r    - waiting %s seconds to rebuild RTSystem.' % (interval-i))
            sys.stdout.flush()
            time.sleep(1)
            
        while not endflag:
            sys.stdout.write('\n    - rtresurrect.\n')                    
            if run.exe_rtresurrect():
                time.sleep(1)
                break
        while not endflag:
            sys.stdout.write('    - rtstart.\n')
            if run.exe_rtstart():
                time.sleep(1)
                break
    sys.stdout.write(' - System successfully started.\n')
    
    if nowait:
        return
    while not endflag:
        try:
            time.sleep(0.1)

            if is_all_process_terminated():
                break
        except Exception, e:
            print 'Exception Occurred: %s' % repr(e)
            endflag = True
            pass


    print ' - Terminating All Process....'        
    terminate_all_process()
    print ' - All rtcd process terminated.'

    if ns_process and ns_process.returncode == None:
        ns_process.kill()


def terminate_all_process():
    global process
    for key in process.keys():
        process[key].poll()
        if process[key].returncode == None:
            sys.stdout.write('    - Terminating RTC-Daemon(%s)\n' % key)
            process[key].kill()
            

    pass


def list_rtcs_by_dataport():
    pass





def list_rtsp():
    
    pass


def list_installed_rtcs():
    retval = {}
    for language in ['C++', 'Python', 'Java']:
        rtcc = rtcconf.RTCConf(wasanbon.setting['application']['conf.' + language])
        #print '    - %s' % language
        retval[language] = []
        try:
            installed = rtcc['manager.components.precreate'].split(',')
            for rtc in installed:
                if rtc.strip() != '':
                    #print '      - %s' % rtc
                    retval[language].append(rtc)
        except KeyError, e:
            pass
    return retval
    pass
